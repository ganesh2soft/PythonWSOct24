import time
import schedule
import threading
import os
import json
from datetime import datetime, time as datetime_time
from flask import session, current_app

data_file = "data.json"

# Function to read from the JSON file
def read_data_from_file():
    if os.path.exists(data_file):
        with open(data_file, 'r') as f:
            data = json.load(f)
            # Return expiry1, expiry2, expiry3, and instrumentkey from the file
            return data.get('expiry1', ''), data.get('expiry2', ''), data.get('expiry3', ''), data.get('instrumentkey', '')
    else:
        return '', '', '', ""  # Default values if the file does not exist


# Scheduler function to check for missed tasks and handle future tasks
def run_scheduler():
     
    while True:
        current_time = datetime.now()
        
        # Check if any tasks have been missed
        for job in schedule.get_jobs():
            #job_time = datetime.strptime(job.at, "%H:%M")
            job_time = job.next_run
            # If the current time is later than the scheduled time for a job, run it
            if current_time > job_time:
                print(f"Missed scheduled time {job_time.strftime('%H:%M')}. Running missed job.")
                job.job_func()  # Execute the missed task
                schedule.cancel_job(job)  # Correct method
  # Correct method
  # Remove the job after execution
        schedule.run_pending()  # Run the pending scheduled tasks
        time.sleep(1)  # Sleep for 1 second to avoid 100% CPU usage

# Function to run the job at specific times
def job(access_token):
    # Push the app context manually
    from app import app
    with app.app_context():
        print('Reached job')
        print(access_token)

        if access_token:
            expiry1, expiry2, expiry3, instrumentkey = read_data_from_file()
            now = datetime.now()
            print(f"Now is: {now}")

            # Execute the task
            print("Executing scheduled task...")
            from app import startrecord 
            startrecord(expiry1, expiry2, expiry3, instrumentkey, access_token)
        else:
            print("No access token found. Skipping job.")

# Function to schedule job at specific times
def schedule_job_times(access_token):
    # Define the times you want to run the job
    times = [
        "02:20", "02:22", "02:24", "02:13", "09:30", "09:40", "09:50", 
        "10:00", "10:10", "10:20", "10:30", "10:40", "10:50", "11:00", 
        "11:10", "11:20", "11:30", "11:40", "11:50", "12:00", "12:10", 
        "12:20", "12:30", "12:40", "12:50", "13:00", "13:10", "13:20", 
        "13:30", "13:40", "13:50", "14:00", "14:10", "14:20", "14:30", 
        "14:40", "14:50", "15:00", "15:10", "15:20", "15:30", "15:40",
        "21:50", "22:00", "23:37", "23:40", "23:42" ,"23:45", "23:55"
    ]

    # Convert each time string to a datetime object and schedule the job
    for time_str in times:
        hour, minute = map(int, time_str.split(":"))
        schedule_time = datetime.now().replace(hour=hour, minute=minute, second=0, microsecond=0)
        
        # Schedule the job to run at each specified time
        # schedule.every().day.at(schedule_time.strftime("%H:%M")).do(lambda: job(access_token))
        schedule.every().day.at(schedule_time.strftime("%H:%M")).do(job, access_token=access_token)
# Function to start the scheduler in a separate thread
def start_scheduler():
    print('Start scheduler block reached')

    # Ensure that the scheduler is only started if there's an access token in the session
    access_token = session.get('access_token', None)

    if access_token:
        print("Starting scheduler...")

        # Schedule jobs for specific times
        schedule_job_times(access_token)

        # Start the scheduler in a new thread
        scheduler_thread = threading.Thread(target=run_scheduler)
        scheduler_thread.daemon = True  # Daemon thread will exit when the main program exits
        scheduler_thread.start()
    else:
        print("No access token found, skipping scheduler startup.")
